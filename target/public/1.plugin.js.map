{"version":3,"file":"1.plugin.js","sources":["/plugin:docEditor/plugins/doc_editor/public/application.tsx","/plugin:docEditor/plugins/doc_editor/public/components/AddDocumentButton.js","/plugin:docEditor/plugins/doc_editor/public/components/DatatableActions.js","/plugin:docEditor/plugins/doc_editor/public/components/FieldsSelector.js","/plugin:docEditor/plugins/doc_editor/public/components/Header.js","/plugin:docEditor/plugins/doc_editor/public/components/IndexDetails.js","/plugin:docEditor/plugins/doc_editor/public/components/IndexList.js","/plugin:docEditor/plugins/doc_editor/public/components/SearchBar.js","/plugin:docEditor/plugins/doc_editor/public/components/app.tsx","/plugin:docEditor/plugins/doc_editor/public/components/flyout/AddNewFieldFlyout.js","/plugin:docEditor/plugins/doc_editor/public/components/flyout/GroupUpdateDocsFlyout.js","/plugin:docEditor/plugins/doc_editor/public/components/flyout/ManageDocFlyout.js","/plugin:docEditor/plugins/doc_editor/public/components/wrapper/GroupUpdateDocsWrapper.js","/plugin:docEditor/plugins/doc_editor/public/components/wrapper/ManageDocWrapper.js","/plugin:docEditor/plugins/doc_editor/public/lib/items.js","/plugin:docEditor/plugins/doc_editor/public/lib/search.js","/plugin:docEditor/plugins/doc_editor/public/lib/utils.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DocEditorApp } from './components/app';\nexport const renderApp = ({\n  notifications,\n  http\n}, {\n  navigation\n}, {\n  appBasePath,\n  element\n}) => {\n  ReactDOM.render( /*#__PURE__*/React.createElement(DocEditorApp, {\n    basename: appBasePath,\n    notifications: notifications,\n    http: http,\n    navigation: navigation\n  }), element);\n  return () => ReactDOM.unmountComponentAtNode(element);\n};","import React from 'react';\nimport { EuiButton } from '@elastic/eui';\nexport default function (props) {\n  return /*#__PURE__*/React.createElement(EuiButton, {\n    fill: true,\n    iconSide: \"right\",\n    iconType: \"indexOpen\",\n    style: {\n      backgroundColor: '#005472'\n    },\n    onClick: props.onClick\n  }, \"Add document\");\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport { EuiButton, EuiContextMenuItem, EuiContextMenuPanel, EuiFlexGroup, EuiFlexItem, EuiIcon, EuiLink, EuiPopover, EuiText } from '@elastic/eui';\nimport AddDocumentButton from './AddDocumentButton';\nimport ManageDocWrapper from './wrapper/ManageDocWrapper';\nimport GroupUpdateDocsWrapper from './wrapper/GroupUpdateDocsWrapper';\nimport { getSelectedItems, areAllCurrentPageItemsSelected, areAtLeastOneCurrentPageItemsSelected } from '../lib/items';\nimport axios from 'axios';\nexport default class extends Component {\n  constructor(props) {\n    super(props); // props.index\n    // props.mapping\n    // props.items\n    // props.total {docs:999, pages:99}\n    // props.areAllPagesItemsSelected\n    // props.selectAllPagesItems  fn : avoid to manage an internal state with suplication of data\n    // props.addCallback\n    // props.updateCallback\n    // props.deleteCallback\n\n    _defineProperty(this, \"onButtonClick\", () => {\n      this.setState(prevState => ({\n        isPopoverOpen: !prevState.isPopoverOpen\n      }));\n    });\n\n    _defineProperty(this, \"closePopover\", () => {\n      this.setState({\n        isPopoverOpen: false\n      });\n    });\n\n    this.state = {\n      isPopoverOpen: false\n    };\n    axios.defaults.headers.post['kbn-xsrf'] = \"reporting\";\n    axios.defaults.headers.delete['kbn-xsrf'] = \"reporting\";\n  }\n\n  render() {\n    const selectedItems = getSelectedItems(this.props.items);\n    const addButton = /*#__PURE__*/React.createElement(ManageDocWrapper, {\n      index: this.props.index,\n      mapping: this.props.mapping,\n      data: {},\n      submitCallback: this.props.addDocument()\n    }, /*#__PURE__*/React.createElement(AddDocumentButton, null));\n    const manageSelectedButton = /*#__PURE__*/React.createElement(EuiButton, {\n      iconType: \"arrowDown\",\n      iconSide: \"right\",\n      onClick: this.onButtonClick\n    }, \"Manage selected items\");\n    let deleteCb, updateCb;\n\n    if (this.props.areAllPagesItemsSelected) {\n      deleteCb = this.props.deleteCallback(null, `Delete all (${this.props.total.docs}) selected items?`, true);\n      updateCb = this.props.updateDocument(null, true);\n    } else {\n      deleteCb = this.props.deleteCallback(selectedItems.map(i => i._id).join(','), `Delete this (${selectedItems.length}) selected items?`, false);\n      updateCb = this.props.updateDocument(selectedItems.map(i => i._id).join(','), false);\n    }\n\n    const items = [/*#__PURE__*/React.createElement(GroupUpdateDocsWrapper, {\n      key: \"UpdateWrapper\",\n      index: this.props.index,\n      mapping: this.props.mapping,\n      submitCallback: updateCb\n    }, /*#__PURE__*/React.createElement(EuiContextMenuItem, {\n      key: \"Update\",\n      icon: \"pencil\"\n    }, \"Update selected\")), /*#__PURE__*/React.createElement(EuiContextMenuItem, {\n      key: \"Delete\",\n      icon: /*#__PURE__*/React.createElement(EuiIcon, {\n        type: \"trash\",\n        color: \"danger\",\n        size: \"m\"\n      }),\n      onClick: deleteCb\n    }, \"Delete selected\")]; // when one item is selected, we can manage some group action\n\n    let manageSelectedPopover;\n\n    if (areAtLeastOneCurrentPageItemsSelected(this.props.items)) {\n      manageSelectedPopover = /*#__PURE__*/React.createElement(EuiPopover, {\n        id: \"contextMenu\",\n        button: manageSelectedButton,\n        isOpen: this.state.isPopoverOpen,\n        closePopover: this.closePopover,\n        panelPaddingSize: \"none\",\n        withTitle: true,\n        anchorPosition: \"downLeft\"\n      }, /*#__PURE__*/React.createElement(EuiContextMenuPanel, {\n        hasFocus: false // avoid a bug when key pressed on up or down arrows\n        ,\n        items: items\n      }));\n    } // when all items are selected, and multiple pages exists, we can select to apply updates on all docs by query\n\n\n    let selectAllLink;\n\n    if (areAllCurrentPageItemsSelected(this.props.items) && this.props.total.pages > 1) {\n      if (!this.props.areAllPagesItemsSelected) {\n        selectAllLink = /*#__PURE__*/React.createElement(EuiText, {\n          style: {\n            marginTop: \"10px\"\n          }\n        }, /*#__PURE__*/React.createElement(\"h6\", null, \"The \", this.props.items.length, \" documents on this page are selected.\", /*#__PURE__*/React.createElement(EuiLink, {\n          onClick: () => {\n            this.props.selectAllPagesItems(true);\n          }\n        }, \"\\xA0Select all \", this.props.total.docs, \" documents?\")));\n      } else {\n        selectAllLink = /*#__PURE__*/React.createElement(EuiText, {\n          style: {\n            marginTop: \"10px\"\n          }\n        }, /*#__PURE__*/React.createElement(\"h6\", null, \"All \", /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"#DD0A73\"\n          }\n        }, this.props.total.docs, \" documents are selected\"), \" (including all \", this.props.total.pages, \" pages) !!\", /*#__PURE__*/React.createElement(EuiLink, {\n          onClick: () => {\n            this.props.selectAllPagesItems(false);\n          }\n        }, \"\\xA0Cancel the other pages selected?\")));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      gutterSize: \"s\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      key: \"actionAdd\",\n      grow: false\n    }, addButton), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      key: \"actionManage\",\n      grow: false\n    }, manageSelectedPopover), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      key: \"actionSelectAll\"\n    }, selectAllLink));\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { EuiComboBox, EuiFlexGroup, EuiFlexItem, EuiFormRow, EuiSpacer, EuiSwitch } from '@elastic/eui';\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"areAllFieldsSelected\", () => {\n      // return true if all elements is selected\n      return this.getSelectedFields().length == this.props.fields.filter(f => !f.disabled).length;\n    });\n\n    _defineProperty(this, \"onToggleAllFieldsChecked\", e => {\n      // no selected ids if all already selected, else all fields are selected\n      let selectedFieldsLabels = this.areAllFieldsSelected() ? [] : this.props.fields.filter(f => !f.disabled).map(f => f.label);\n      this.setState({\n        selectedFieldsLabels\n      });\n      this.props.onSelectFields(selectedFieldsLabels);\n    });\n\n    _defineProperty(this, \"onChangeSelectFields\", selectedFields => {\n      let selectedFieldsLabels = selectedFields.map(f => f.label);\n      this.setState({\n        selectedFieldsLabels\n      });\n      this.props.onSelectFields(selectedFieldsLabels);\n    });\n\n    this.state = {\n      selectedFieldsLabels: []\n    };\n  }\n\n  getFieldsByGroup() {\n    // Get all unique type values\n    let groupLabels = this.props.fields.map(p => p.type) // get the field datatype\n    .filter((p, i, self) => self.indexOf(p) == i); // remove duplicates\n\n    return groupLabels.map(g => ({\n      key: g,\n      label: g,\n      options: this.props.fields.filter(f => f.type === g)\n    }));\n  }\n\n  getSelectedFields() {\n    return this.props.fields.filter(f => this.state.selectedFieldsLabels.includes(f.label));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(EuiFlexGroup, null, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiFormRow, {\n      label: \"Select the fields to vizualize\",\n      helpText: \"For some index with many existing fields, visualisation is better with a short preset of fields\"\n    }, /*#__PURE__*/React.createElement(EuiComboBox, {\n      placeholder: \"\",\n      options: this.getFieldsByGroup(),\n      selectedOptions: this.getSelectedFields(),\n      onChange: this.onChangeSelectFields,\n      isClearable: true\n    }))), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      style: {\n        marginTop: '40px'\n      }\n    }, /*#__PURE__*/React.createElement(EuiSwitch, {\n      label: \"Check all fields\",\n      checked: this.areAllFieldsSelected(),\n      onChange: this.onToggleAllFieldsChecked\n    }))), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"m\"\n    }));\n  }\n\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FontAwesome from 'react-fontawesome';\nimport { EuiHeader, EuiHeaderLogo, EuiHeaderSection, EuiHeaderSectionItem, EuiLink, EuiTitle } from '@elastic/eui';\nexport default function Header(props) {\n  let firstPageLink;\n  if (props.firstPage !== true) firstPageLink = /*#__PURE__*/React.createElement(EuiHeaderSectionItem, {\n    border: \"right\"\n  }, /*#__PURE__*/React.createElement(EuiLink, {\n    href: \"#/\",\n    onClick: e => {\n      e.preventDefault();\n      props.onClickHome();\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesome, {\n    className: \"fas fa-arrow-circle-left\",\n    name: \"fas fa-arrow-circle-left\",\n    size: \"3x\",\n    style: {\n      color: '#025471',\n      paddingLeft: '15px',\n      marginTop: '10px',\n      width: '70px'\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(EuiHeader, null, /*#__PURE__*/React.createElement(EuiHeaderSection, null, firstPageLink, /*#__PURE__*/React.createElement(EuiHeaderLogo, {\n    \"aria-label\": \"Doc Editor logo\",\n    iconType: \"indexEdit\",\n    size: \"xxl\",\n    style: {\n      color: '#025471',\n      paddingLeft: '20px',\n      marginTop: '10px',\n      width: '50px'\n    }\n  }), /*#__PURE__*/React.createElement(EuiTitle, {\n    size: \"l\"\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: '#025471',\n      padding: '10px'\n    }\n  }, \"Doc Editor\")))));\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react'; // import \"@elastic/eui/dist/eui_theme_k6_light.css\"\n\nimport \"@elastic/eui/dist/eui_theme_light.css\";\nimport 'brace/ext/language_tools';\nimport Header from './Header.js';\nimport SearchBar from './SearchBar';\nimport DatatableActions from './DatatableActions';\nimport AddDocumentButton from './AddDocumentButton';\nimport ManageDocWrapper from './wrapper/ManageDocWrapper';\nimport { getQueryDslBySearchText } from '../lib/search';\nimport { isItemSelected, areAllCurrentPageItemsSelected } from '../lib/items';\nimport { stringifyOnce } from '../lib/utils';\nimport axios from 'axios';\nimport { EuiButton, EuiButtonIcon, EuiCheckbox, EuiCodeBlock, EuiEmptyPrompt, EuiSpacer, EuiSwitch, EuiTable, EuiTableBody, EuiTableHeader, EuiTableHeaderCell, EuiTableHeaderCellCheckbox, EuiTablePagination, EuiTableRow, EuiTableRowCell, EuiTableRowCellCheckbox, EuiToolTip, Pager, LEFT_ALIGNMENT, RIGHT_ALIGNMENT } from '@elastic/eui';\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChangeItemsPerPage\", itemsPerPage => {\n      this.pager.setItemsPerPage(itemsPerPage);\n      this.search({\n        from: 0,\n        size: itemsPerPage\n      });\n    });\n\n    _defineProperty(this, \"onChangePage\", pageIndex => {\n      this.search({\n        from: pageIndex * this.state.search.size\n      });\n    });\n\n    _defineProperty(this, \"toggleSelectItem\", itemToToggle => {\n      return e => {\n        this.setState(previousState => ({\n          areAllPagesItemsSelected: false,\n          items: previousState.items.map(item => {\n            if (item === itemToToggle) item.selected = !(item.selected || false);\n            return item;\n          })\n        }));\n      };\n    });\n\n    _defineProperty(this, \"toggleSelectAll\", () => {\n      return e => {\n        this.setState(previousState => {\n          const allSelected = !areAllCurrentPageItemsSelected(previousState.items);\n          return {\n            areAllPagesItemsSelected: false,\n            items: previousState.items.map(item => {\n              item.selected = allSelected;\n              return item;\n            })\n          };\n        });\n      };\n    });\n\n    _defineProperty(this, \"toggleDetails\", item => {\n      let expandedItemIds = this.state.expandedItemIds;\n\n      if (expandedItemIds.includes(item._id)) {\n        expandedItemIds = expandedItemIds.filter(i => i !== item._id);\n      } else {\n        expandedItemIds = [...expandedItemIds, item._id];\n      }\n\n      this.setState({\n        expandedItemIds\n      });\n    });\n\n    _defineProperty(this, \"selectAllPagesItems\", isAllSelected => {\n      this.setState({\n        areAllPagesItemsSelected: isAllSelected\n      });\n    });\n\n    this.index = props.index;\n    this.selectedColumns = props.selectedColumns;\n    this.onClickHome = props.onClickHome; // this.index = props.match.params.index\n    // this.selectedColumns = props.match.params.cols\n\n    this.state = {\n      items: [],\n      // the set of displayed docs in data table\n      total: 0,\n      // total items for pager\n      search: {\n        // search bar and pagination state\n        query: \"\",\n        from: 0,\n        size: 10,\n        sort: {\n          \"_id\": \"asc\"\n        }\n      },\n      areAllPagesItemsSelected: false,\n      mapping: false,\n      flyout: {\n        isVisible: false,\n        // condition the display of the global flyout\n        type: false,\n        // choose the flyout type to display : \"new\", \"update\" or \"group\"\n        data: false // set the data by the flyout type : false when \"new\", single doc item when \"update\", list of docs when \"group\"\n\n      },\n      expandedItemIds: [] // set of expanded item ids\n\n    };\n    this.init();\n    axios.defaults.headers.post['kbn-xsrf'] = \"reporting\";\n    axios.defaults.headers.delete['kbn-xsrf'] = \"reporting\";\n    this.search = this.search.bind(this);\n    this.toggleSelectItem = this.toggleSelectItem.bind(this);\n    this.toggleSelectAll = this.toggleSelectAll.bind(this);\n    this.toggleDetails = this.toggleDetails.bind(this);\n    this.onChangePage = this.onChangePage.bind(this);\n    this.onChangeItemsPerPage = this.onChangeItemsPerPage.bind(this);\n    this.selectAllPagesItems = this.selectAllPagesItems.bind(this);\n    this.deleteDocument = this.deleteDocument.bind(this);\n    this.addDocument = this.addDocument.bind(this);\n    this.updateDocument = this.updateDocument.bind(this);\n  }\n\n  async init() {\n    await this.initMapping();\n    await this.initHeaderColumns();\n    await this.search();\n    this.pager = new Pager(this.state.total, this.state.search.size);\n    this.state.firstItemIndex = this.pager.getFirstItemIndex();\n    this.state.lastItemIndex = this.pager.getLastItemIndex();\n  }\n\n  async initMapping() {\n    try {\n      const mapping = await axios.get(`../api/doc-editor/${this.index}/_mapping`);\n      this.setState(() => ({\n        mapping: mapping.data\n      }));\n    } catch (err) {\n      console.log(\"Error on getting mapping. Check the network tab to find why the mapping request failed.\");\n    }\n  }\n  /**\n   * Create the headerColumn object containing the datatable headers informations (used later in renderHeaderCells)\n   */\n\n\n  async initHeaderColumns() {\n    let check = {\n      id: 'checkbox',\n      type: 'checkbox',\n      textOnly: false,\n      width: '50px',\n      alignment: LEFT_ALIGNMENT\n    };\n    let actions = {\n      id: 'actions',\n      type: 'actions',\n      label: 'actions',\n      alignment: RIGHT_ALIGNMENT,\n      width: '90px'\n    };\n    let columns = this.selectedColumns.map(prop => ({\n      id: prop,\n      label: prop,\n      alignment: LEFT_ALIGNMENT\n    }));\n    this.headerColumns = [check, ...columns, actions];\n  }\n  /**\n   * Request a search to ES according to the filter bar and given pagination parameters\n   */\n\n\n  async search({\n    query = false,\n    from = false,\n    size = false,\n    sort = false\n  } = {}) {\n    // special case reset the from value if the query changes\n    if (query !== false && from === false) from = 0; // Merge parameters with existing search\n\n    query = query !== false ? query : this.state.search.query;\n    from = from !== false ? from : this.state.search.from, size = size !== false ? size : this.state.search.size, sort = sort !== false ? sort : this.state.search.sort; // create the query json part, when query is empty or not\n\n    let queryReq = getQueryDslBySearchText(query); // let queryReq = { match_all: {} }\n\n    var requestBody = {\n      from,\n      size,\n      sort,\n      query: queryReq\n    };\n\n    try {\n      let rawResult = await axios.post(`../api/doc-editor/${this.index}/_search`, requestBody);\n      let result = rawResult.data;\n      this.pager = new Pager(result.hits.total.value, size);\n      this.setState({\n        search: {\n          query,\n          from,\n          size,\n          sort\n        },\n        items: result.hits.hits,\n        firstItemIndex: this.pager.getFirstItemIndex(),\n        lastItemIndex: this.pager.getLastItemIndex(),\n        total: result.hits.total.value\n      });\n    } catch (err) {\n      console.log(\"Error during search\", err);\n    }\n  }\n\n  // END MANAGE SELECTED ITEMS\n  // ---------------------\n  // MANAGE ACTIONS ON DOC\n  // ---------------------\n  // Add a new document with given body and reload search\n  addDocument() {\n    // const {\n    //   index: i,\n    // } = this.state\n    const i = this.index;\n    const search = this.search;\n    return async function (docBody) {\n      try {\n        const response = await axios.post(`../api/doc-editor/${i}/_doc`, docBody);\n        search();\n        return response;\n      } catch (err) {\n        console.log(\"Error during adding document\", err);\n        return false;\n      }\n    };\n  } // Delete the given item (or many separated by ,) and reload search\n\n\n  deleteDocument(itemId, confirmMessage = \"Delete this document?\", applyByQueryOnAllDocs = false) {\n    // const {\n    //   index: i\n    // } = this.state\n    const i = this.index;\n    const s = this.state.search; // used for by query request\n\n    const search = this.search;\n    return async function (e) {\n      var result = confirm(confirmMessage);\n\n      if (!result) {\n        return false;\n      }\n\n      try {\n        if (applyByQueryOnAllDocs) {\n          await axios.post(`../api/doc-editor/${i}/_doc/_delete_by_query`, {\n            query: getQueryDslBySearchText(s.query)\n          });\n        } else {\n          await axios.delete(`../api/doc-editor/${i}/_doc/${itemId}`);\n        }\n\n        search();\n      } catch (err) {\n        console.log(\"Error on deleting item(s) \", err);\n      }\n    };\n  } // Update an existing document (or many separated by ,) by Id with given body and reload search\n\n\n  updateDocument(docId, applyByQueryOnAllDocs = false) {\n    // const {\n    //   index: i,\n    // } = this.state\n    const i = this.index;\n    const s = this.state.search; // used for by query request\n\n    const search = this.search;\n    return async function (docBody) {\n      try {\n        let response;\n\n        if (applyByQueryOnAllDocs) {\n          let script = Object.keys(docBody).map(key => `ctx._source.${key} = \\\"${docBody[key]}\\\"`).join(';');\n          response = await axios.post(`../api/doc-editor/${i}/_doc/_update_by_query`, {\n            query: getQueryDslBySearchText(s.query),\n            script\n          });\n        } else {\n          response = await axios.post(`../api/doc-editor/${i}/_doc/${docId}/_update`, docBody);\n        }\n\n        search();\n        return response;\n      } catch (err) {\n        console.log(\"Error during updating item(s)\", err);\n        return false;\n      }\n    };\n  } // --------------\n  // RENDER SECTION\n  // --------------\n\n\n  renderHeaderCells() {\n    if (!this.headerColumns) {\n      return null;\n    }\n\n    return this.headerColumns.map((column, columnIndex) => {\n      if (column.type === \"checkbox\") {\n        return /*#__PURE__*/React.createElement(EuiTableHeaderCellCheckbox, {\n          key: column.id,\n          align: this.headerColumns[columnIndex].alignment,\n          width: column.width\n        }, /*#__PURE__*/React.createElement(EuiCheckbox, {\n          id: \"selectAllCheckbox\",\n          checked: areAllCurrentPageItemsSelected(this.state.items),\n          onChange: this.toggleSelectAll(),\n          type: \"inList\"\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(EuiTableHeaderCell, {\n        key: column.id,\n        align: this.headerColumns[columnIndex].alignment,\n        width: column.width,\n        style: {\n          color: '#025471'\n        }\n      }, column.label);\n    });\n  }\n\n  renderRows() {\n    if (!this.headerColumns) {\n      return null;\n    }\n\n    if (this.state.items.length == 0) {\n      return null;\n    } // Similar as a \"1 -> n\" array.map process\n    // Loop on each items and create a main row and its expanded row\n\n\n    return this.state.items.reduce((rows, item) => {\n      // main item row\n      rows.push( /*#__PURE__*/React.createElement(EuiTableRow // add the main item row and render cells for each columns\n      , {\n        key: `${item._id}-row`,\n        hasActions: true,\n        isExpandable: true\n      }, this.headerColumns.map(column => this.renderCell(item, column)))); // if expanded is toggled, add the expanded item row and render a full colSpan cell with expanded content\n\n      if (this.state.expandedItemIds.includes(item._id)) {\n        rows.push( /*#__PURE__*/React.createElement(EuiTableRow // expanded item row\n        , {\n          key: `${item._id}-row-expanded`,\n          isExpandedRow: this.state.expandedItemIds.includes(item._id)\n        }, this.renderCellExpandedPart(item, this.headerColumns.length)));\n      }\n\n      return rows;\n    }, []);\n  }\n\n  renderCheckboxCell(item, column) {\n    let checked = isItemSelected(item);\n    return /*#__PURE__*/React.createElement(EuiTableRowCellCheckbox, {\n      key: column.id\n    }, /*#__PURE__*/React.createElement(EuiCheckbox, {\n      id: `${item._id}-checkbox`,\n      checked: checked,\n      onChange: this.toggleSelectItem(item),\n      type: \"inList\"\n    }));\n  }\n\n  renderActionsCell(item, column) {\n    const {\n      expandedItemIds\n    } = this.state;\n    return /*#__PURE__*/React.createElement(EuiTableRowCell, {\n      key: column.id,\n      textOnly: false,\n      hasActions: true,\n      isExpander: true\n    }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ManageDocWrapper, {\n      index: this.index,\n      mapping: this.state.mapping,\n      data: item._source,\n      submitCallback: this.updateDocument(item._id)\n    }, /*#__PURE__*/React.createElement(EuiButtonIcon, {\n      \"aria-label\": \"Actions\",\n      iconType: \"pencil\",\n      style: {\n        width: '20px',\n        height: '20px'\n      }\n    })), /*#__PURE__*/React.createElement(EuiButtonIcon, {\n      \"aria-label\": \"Actions\",\n      iconType: \"trash\",\n      style: {\n        width: '20px',\n        height: '20px',\n        color: 'red'\n      },\n      onClick: this.deleteDocument(item._id)\n    }), /*#__PURE__*/React.createElement(EuiButtonIcon, {\n      style: {\n        width: '20px',\n        height: '20px'\n      },\n      onClick: () => this.toggleDetails(item),\n      \"aria-label\": expandedItemIds.includes(item._id) ? 'Collapse' : 'Expand',\n      iconType: expandedItemIds.includes(item._id) ? 'arrowUp' : 'arrowDown'\n    })));\n  }\n\n  renderCell(item, column) {\n    switch (column.type) {\n      case 'checkbox':\n        return this.renderCheckboxCell(item, column);\n\n      case 'actions':\n        return this.renderActionsCell(item, column);\n    } // else default common cell type\n\n\n    let cellValue = item._source[column.id];\n\n    if (cellValue === undefined) {\n      cellValue = /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          opacity: 0.7\n        }\n      }, \"-\");\n    } else if (typeof cellValue === 'boolean') {\n      cellValue = /*#__PURE__*/React.createElement(EuiSwitch, {\n        checked: cellValue,\n        disabled: true\n      });\n    } else if ([\"object\", \"array\", \"nested\"].includes(typeof cellValue)) {\n      // if object or array or nested, display the content in tooltip\n      let content = /*#__PURE__*/React.createElement(\"pre\", {\n        className: \"prettyprint\"\n      }, /*#__PURE__*/React.createElement(\"code\", null, stringifyOnce(cellValue, null, 2)));\n      cellValue = /*#__PURE__*/React.createElement(EuiToolTip, {\n        position: \"top\",\n        content: content\n      }, /*#__PURE__*/React.createElement(\"span\", null, \"<\", typeof cellValue, \">\"));\n    }\n\n    return /*#__PURE__*/React.createElement(EuiTableRowCell, {\n      key: column.id,\n      align: column.alignment,\n      isExpander: false,\n      truncateText: false,\n      textOnly: false // necessary to display content on multiple line\n\n    }, cellValue);\n  }\n\n  renderCellExpandedPart(item, colSpan) {\n    return /*#__PURE__*/React.createElement(EuiTableRowCell, {\n      key: \"expanded-row-cell\",\n      align: LEFT_ALIGNMENT,\n      colSpan: colSpan,\n      isExpander: true,\n      truncateText: false,\n      textOnly: false // necessary to display content on multiple line\n\n    }, /*#__PURE__*/React.createElement(EuiCodeBlock, {\n      language: \"json\",\n      fontSize: \"m\",\n      paddingSize: \"m\",\n      color: \"dark\",\n      overflowHeight: 300,\n      isCopyable: true\n    }, JSON.stringify(item, null, 2)));\n  }\n\n  renderDatatableActions() {\n    if (!this.pager || !this.state.items.length) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(DatatableActions, {\n      index: this.index,\n      mapping: this.state.mapping,\n      items: this.state.items,\n      total: {\n        docs: this.state.total,\n        pages: this.pager.getTotalPages()\n      },\n      areAllPagesItemsSelected: this.state.areAllPagesItemsSelected,\n      selectAllPagesItems: this.selectAllPagesItems\n      /*selectedItems={this.getSelectedItems(this.state.items)}*/\n      ,\n      addDocument: this.addDocument,\n      updateDocument: this.updateDocument,\n      deleteCallback: this.deleteDocument\n    });\n  }\n\n  renderDatatable() {\n    if (!this.state.items.length) {\n      return this.renderEmptyDatatable();\n    }\n\n    return /*#__PURE__*/React.createElement(EuiTable, null, /*#__PURE__*/React.createElement(EuiTableHeader, null, this.renderHeaderCells()), /*#__PURE__*/React.createElement(EuiTableBody, {\n      style: {\n        display: 'contents'\n      }\n    }, this.renderRows()));\n  }\n\n  renderEmptyDatatable() {\n    let title,\n        body,\n        actions = /*#__PURE__*/React.createElement(ManageDocWrapper, {\n      index: this.index,\n      mapping: this.state.mapping,\n      data: {},\n      submitCallback: this.addDocument()\n    }, /*#__PURE__*/React.createElement(AddDocumentButton, null));\n\n    if (!this.state.search.query || this.state.search.query.trim() === \"*\") {\n      title = /*#__PURE__*/React.createElement(\"h2\", null, \"You have no document in this index\");\n      body = /*#__PURE__*/React.createElement(\"p\", null, \"No worries ! \", /*#__PURE__*/React.createElement(\"br\", null), \"You can add a new one with this plugin :-)\");\n    } else {\n      title = /*#__PURE__*/React.createElement(\"h2\", null, \"No document found with your filter\");\n      body = /*#__PURE__*/React.createElement(\"p\", null, \"You should change your search query in the search bar. \", /*#__PURE__*/React.createElement(\"br\", null), \"See the \", /*#__PURE__*/React.createElement(\"a\", {\n        href: \"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\",\n        target: \"_blank\"\n      }, \"elasticsearch documentation\"), \" for more informations about the Query string syntax.\");\n      actions = /*#__PURE__*/React.createElement(Fragment, null, actions, /*#__PURE__*/React.createElement(EuiSpacer, {\n        size: \"s\"\n      }), /*#__PURE__*/React.createElement(EuiButton, {\n        onClick: () => {\n          this.search({\n            query: \"\"\n          });\n        }\n      }, \"Reset the current filter to view all documents\"));\n    }\n\n    return /*#__PURE__*/React.createElement(EuiEmptyPrompt, {\n      iconType: \"eyeClosed\",\n      title: title,\n      body: body,\n      actions: actions\n    });\n  }\n\n  renderPagination() {\n    if (!this.pager || !this.state.items.length) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(EuiTablePagination, {\n      activePage: this.state.search.from / this.state.search.size,\n      itemsPerPage: this.state.search.size,\n      itemsPerPageOptions: [10, 20, 50, 100],\n      pageCount: this.pager.getTotalPages(),\n      onChangeItemsPerPage: this.onChangeItemsPerPage,\n      onChangePage: this.onChangePage\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Header, {\n      onClickHome: this.onClickHome\n    }), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"m\"\n    }), /*#__PURE__*/React.createElement(SearchBar, {\n      search: this.search,\n      query: this.state.search.query\n    }), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"m\"\n    }), this.renderDatatableActions(), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"s\"\n    }), this.renderDatatable(), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"s\"\n    }), this.renderDatatableActions(), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"m\"\n    }), this.renderPagination(), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"xl\"\n    }));\n  } // END RENDER SECTION\n\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react'; // import ReactDOM from 'react-dom';\n\nimport { EuiButton, EuiComboBox, EuiFlexGroup, EuiFlexItem, EuiFormRow, EuiText, EuiTitle, EuiSpacer } from '@elastic/eui';\nimport AddNewFieldFlyout from './flyout/AddNewFieldFlyout';\nimport FieldsSelector from './FieldsSelector';\nimport Header from './Header';\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChangeSelectIndex\", selectedIndices => {\n      let selectedIndex = selectedIndices[0];\n      this.setState({\n        selectedIndex,\n        availableFields: false\n      });\n      this.refreshMapping(selectedIndex.label);\n    });\n\n    _defineProperty(this, \"refreshMapping\", selectedIndexName => {\n      let index = selectedIndexName;\n      fetch(`../api/doc-editor/${index}/_mapping`, {\n        method: 'get'\n      }).then(res => res.json()).then(result => {\n        let mappings = result[index][\"mappings\"];\n        let indexProps = mappings[\"properties\"];\n        let availableFields = Object.keys(indexProps).map((key, i) => {\n          if (indexProps[key][\"type\"]) {\n            return {\n              \"id\": i.toString(),\n              \"label\": key,\n              \"type\": indexProps[key][\"type\"],\n              \"disabled\": false\n            };\n          } else {\n            return {\n              \"id\": i.toString(),\n              \"label\": key + \" (Complex Field not supported)\",\n              \"type\": \"complex\",\n              \"disabled\": true\n            };\n          }\n        });\n        this.setState({\n          availableFields: availableFields\n        });\n      }).catch(err => {\n        console.log(\"Error to refresh the mapping :\", err);\n      });\n    });\n\n    _defineProperty(this, \"changeSelectFields\", selectedFields => {\n      this.setState({\n        selectedFieldsParams: selectedFields.join(\",\"),\n        isNextButtonActive: selectedFields && this.state.selectedIndex.label\n      });\n    });\n\n    this.onClickNextButton = props.onClickNextButton;\n    this.defaultIndexChoice = {\n      label: 'choose index',\n      disabled: true\n    };\n    let otherIndexChoices = this.props.indices.sort().map(i => ({\n      \"label\": i\n    }));\n    this.indices = [this.defaultIndexChoice, ...otherIndexChoices];\n    this.closeNewFieldModal = this.closeNewFieldModal.bind(this);\n    this.showNewFieldModal = this.showNewFieldModal.bind(this);\n    this.state = {\n      availableFields: false,\n      selectedIndex: this.defaultIndexChoice,\n      isNextButtonActive: false,\n      isModalVisible: false\n    };\n  }\n\n  closeNewFieldModal() {\n    this.setState({\n      isModalVisible: false\n    });\n  }\n\n  showNewFieldModal() {\n    this.setState({\n      isModalVisible: true\n    });\n  }\n\n  render() {\n    const {\n      selectedOptions,\n      selectedFieldsParams,\n      selectedIndex,\n      isNextButtonActive\n    } = this.state;\n    let nextButton = /*#__PURE__*/React.createElement(EuiButton // href={`#/index/${selectedIndex.label}/${selectedFieldsParams}`}\n    , {\n      iconSide: \"right\",\n      iconType: \"arrowRight\",\n      isDisabled: !isNextButtonActive,\n      fill: true,\n      onClick: () => this.onClickNextButton(selectedIndex.label, selectedFieldsParams) // onClick={() => { ReactDOM.unmountComponentAtNode(ReactDOM.findDOMNode(this).parentNode) }}\n\n    }, \"Next\");\n    let fieldsSelector;\n    let addNewFieldFlyout;\n    let addNewFieldButton;\n\n    if (this.state.selectedIndex !== this.defaultIndexChoice) {\n      if (this.state.availableFields !== false) {\n        if (!this.state.availableFields.length) {\n          fieldsSelector = /*#__PURE__*/React.createElement(EuiText, null, \"No fields found for this index\");\n        } else {\n          fieldsSelector = /*#__PURE__*/React.createElement(FieldsSelector, {\n            onSelectFields: this.changeSelectFields,\n            fields: this.state.availableFields\n          });\n        }\n      }\n\n      addNewFieldButton = /*#__PURE__*/React.createElement(EuiButton, {\n        onClick: this.showNewFieldModal,\n        iconSide: \"left\",\n        iconType: \"plusInCircle\"\n      }, \"Add a new field\");\n\n      if (this.state.isModalVisible) {\n        addNewFieldFlyout = /*#__PURE__*/React.createElement(AddNewFieldFlyout, {\n          close: this.closeNewFieldModal,\n          refreshMapping: this.refreshMapping,\n          index: this.state.selectedIndex.label\n        });\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      firstPage: true\n    }), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"l\"\n    }), /*#__PURE__*/React.createElement(EuiTitle, null, /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        fontWeight: '600'\n      }\n    }, \"Elasticsearch indices\")), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"l\"\n    }), /*#__PURE__*/React.createElement(EuiFormRow, {\n      label: \"Select the index to manage\",\n      helpText: \"You can add new document, edit or delete existing and append new datafields to the selected index\"\n    }, /*#__PURE__*/React.createElement(EuiComboBox, {\n      placeholder: \"\",\n      singleSelection: {\n        asPlainText: true\n      },\n      options: this.indices,\n      selectedOptions: [this.state.selectedIndex],\n      onChange: this.onChangeSelectIndex,\n      isClearable: false\n    })), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"m\"\n    }), fieldsSelector, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(\"div\", null, addNewFieldButton, addNewFieldFlyout)), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"l\"\n    }), /*#__PURE__*/React.createElement(EuiFlexGroup, null, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(\"div\", null, nextButton))), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"l\"\n    }));\n  }\n\n}","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { EuiButton, EuiFlexGroup, EuiFlexItem, EuiFieldSearch, EuiSearchBar } from '@elastic/eui';\nexport default function SearchBar(props) {\n  const handleSearch = e => {\n    props.search({\n      query: e.queryText\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(EuiFlexGroup, {\n    gutterSize: \"m\"\n  }, /*#__PURE__*/React.createElement(EuiFlexItem, null, /*#__PURE__*/React.createElement(EuiSearchBar, {\n    fullWidth: true,\n    onChange: handleSearch,\n    query: props.queryText || \"\",\n    placeholder: \"Search...\"\n  })), /*#__PURE__*/React.createElement(EuiFlexItem, {\n    grow: false\n  }));\n}","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { I18nProvider } from '@kbn/i18n/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { EuiPage, EuiPageBody, EuiPageContent, EuiPageContentBody, EuiText } from '@elastic/eui';\nimport IndexDetails from './IndexDetails';\nimport IndexList from './IndexList';\nexport const DocEditorApp = ({\n  basename,\n  http\n}) => {\n  // Use React hooks to manage state.\n  const [atHome, setAtHome] = useState(true);\n  const [indices, setIndices] = useState([]);\n  const [index, setIndex] = useState({});\n  const [toggleRefresh, setToggleRefresh] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleOnClickNextButton = (index, cols) => {\n    setAtHome(false);\n    setIndex({\n      name: index,\n      selectedColumns: cols.split(',')\n    });\n  };\n\n  const handleOnclickHome = () => {\n    setAtHome(true);\n    setToggleRefresh(!toggleRefresh);\n  };\n\n  useEffect(() => {\n    const getIndices = async () => {\n      setIsLoading(true);\n      const result = await http.get('../api/doc-editor/indices');\n      setIndices(result.data);\n      setIsLoading(false);\n    };\n\n    getIndices();\n    console.log('useEffect toggleRefresh: ', toggleRefresh);\n  }, [toggleRefresh]); // Render the application DOM.\n\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename\n  }, /*#__PURE__*/React.createElement(I18nProvider, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EuiPage, {\n    restrictWidth: \"1000px\"\n  }, /*#__PURE__*/React.createElement(EuiPageBody, null, /*#__PURE__*/React.createElement(EuiPageContent, null, /*#__PURE__*/React.createElement(EuiPageContentBody, null, /*#__PURE__*/React.createElement(EuiText, null, atHome ? isLoading ? /*#__PURE__*/React.createElement(\"div\", null, \"Loading ...\") : /*#__PURE__*/React.createElement(IndexList, {\n    indices: indices,\n    column: [],\n    onClickNextButton: handleOnClickNextButton\n  }) : /*#__PURE__*/React.createElement(IndexDetails, {\n    index: index.name,\n    onClickHome: handleOnclickHome,\n    selectedColumns: index.selectedColumns\n  })))))))));\n};","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { EuiButton, EuiButtonEmpty, EuiComboBox, EuiFieldText, EuiFlexGroup, EuiFlexItem, EuiFlyout, EuiFlyoutBody, EuiFlyoutFooter, EuiFlyoutHeader, EuiForm, EuiFormRow, EuiSpacer, EuiTitle } from '@elastic/eui';\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fieldName: \"\",\n      selectedTypes: [],\n      isInvalidName: false,\n      isInvalidDatatype: false\n    };\n    this.datatypes = [{\n      key: 'Text',\n      label: 'Text',\n      options: [{\n        label: 'text'\n      }, {\n        label: 'keyword'\n      }, {\n        label: 'text+keyword'\n      }]\n    }, {\n      key: 'Number',\n      label: 'Number',\n      options: [{\n        label: 'short'\n      }, {\n        label: 'integer'\n      }, {\n        label: 'long'\n      }, {\n        label: 'float'\n      }, {\n        label: 'double'\n      }]\n    }, {\n      key: 'Boolean',\n      label: 'Boolean',\n      options: [{\n        label: 'boolean'\n      }]\n    }, {\n      key: 'Date',\n      label: 'Date',\n      options: [{\n        label: 'date'\n      }]\n    }];\n    this.close = this.props.close;\n    this.handleInputFieldname = this.handleInputFieldname.bind(this);\n    this.handleChangeDatatype = this.handleChangeDatatype.bind(this);\n    this.handleCreateNewField = this.handleCreateNewField.bind(this);\n  }\n\n  handleInputFieldname(e) {\n    this.setState({\n      fieldName: e.target.value,\n      isInvalidName: this.isInvalidName(e.target.value)\n    });\n  }\n\n  handleChangeDatatype(selectedTypes) {\n    this.setState({\n      selectedTypes,\n      isInvalidDatatype: this.isInvalidDatatype(selectedTypes)\n    });\n  }\n\n  isInvalidName(name) {\n    return name.trim() === '';\n  }\n\n  isInvalidDatatype(types) {\n    return !types || !types.length;\n  }\n\n  handleCreateNewField() {\n    const {\n      fieldName,\n      selectedTypes\n    } = this.state;\n    const isInvalidName = this.isInvalidName(fieldName);\n    const isInvalidDatatype = this.isInvalidDatatype(selectedTypes);\n\n    if (isInvalidName || isInvalidDatatype) {\n      this.setState({\n        isInvalidName,\n        isInvalidDatatype\n      });\n      return;\n    }\n\n    let body = this.getBody(fieldName, selectedTypes[0].label);\n    fetch(`../api/doc-editor/${this.props.index}/_mapping`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'kbn-xsrf': 'reporting'\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(result => {\n      this.props.refreshMapping(this.props.index);\n    }).catch(err => {\n      console.log(`Error to create a new field ${fieldName} in index ${this.props.index}`, err);\n    });\n    this.close();\n  }\n\n  getBody(name, datatype, ignoreAbove = 512) {\n    let type = {\n      \"type\": datatype\n    };\n\n    if (datatype == \"text+keyword\") {\n      type = {\n        \"type\": \"text\",\n        \"fields\": {\n          \"keyword\": {\n            \"type\": \"keyword\",\n            \"ignore_above\": ignoreAbove\n          }\n        }\n      };\n    }\n\n    return {\n      \"properties\": {\n        [name]: type\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(EuiFlyout, {\n      onClose: this.close,\n      size: \"m\"\n    }, /*#__PURE__*/React.createElement(EuiFlyoutHeader, {\n      hasBorder: true\n    }, /*#__PURE__*/React.createElement(EuiTitle, {\n      size: \"m\"\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"AddNewFieldToIndex\"\n    }, \"Add a new field to this index\"))), /*#__PURE__*/React.createElement(EuiFlyoutBody, null, /*#__PURE__*/React.createElement(EuiForm, null, /*#__PURE__*/React.createElement(EuiFormRow, {\n      label: \"Field name\"\n    }, /*#__PURE__*/React.createElement(EuiFieldText, {\n      name: \"fieldname\",\n      value: this.state.fieldName,\n      onChange: this.handleInputFieldname,\n      isInvalid: this.state.isInvalidName\n    })), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"m\"\n    }), /*#__PURE__*/React.createElement(EuiFormRow, {\n      label: \"Field datatype\"\n    }, /*#__PURE__*/React.createElement(EuiComboBox, {\n      placeholder: \"Choose a type\",\n      options: this.datatypes,\n      selectedOptions: this.state.selectedTypes,\n      onChange: this.handleChangeDatatype,\n      isInvalid: this.state.isInvalidDatatype,\n      isClearable: false,\n      singleSelection: {\n        asPlainText: true\n      }\n    })))), /*#__PURE__*/React.createElement(EuiFlyoutFooter, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      justifyContent: \"spaceBetween\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButtonEmpty, {\n      iconType: \"cross\",\n      onClick: this.close,\n      flush: \"left\"\n    }, \"Close\")), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      onClick: this.handleCreateNewField,\n      fill: true\n    }, \"Save\")))));\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport 'brace/theme/github';\nimport 'brace/mode/json';\nimport 'brace/snippets/json';\nimport { EuiButton, EuiButtonEmpty, EuiButtonIcon, EuiCheckbox, EuiCodeEditor, EuiFieldText, EuiFieldNumber, EuiFlexItem, EuiFlexGroup, EuiFlyout, EuiFlyoutBody, EuiFlyoutFooter, EuiFlyoutHeader, EuiForm, EuiFormRow, EuiListGroup, EuiListGroupItem, EuiPanel, EuiSpacer, EuiSuperSelect, EuiText, EuiTitle } from '@elastic/eui';\nimport axios from 'axios';\nexport default class extends Component {\n  constructor(props) {\n    super(props); // List of fields of the doc from mapping\n\n    _defineProperty(this, \"onChangeNewDocProp\", value => {\n      this.setState({\n        newDocPropNameValue: value\n      });\n    });\n\n    _defineProperty(this, \"onAddNewDocProp\", e => {\n      if (!this.state.newDocPropNameValue) return false;\n      this.setState(previousState => ({\n        fieldsToUpdate: [...previousState.fieldsToUpdate, previousState.newDocPropNameValue],\n        newDocPropNameValue: \"\",\n        // reset the select\n        body: { ...previousState.body,\n          [previousState.newDocPropNameValue]: \"\" // add an initial empty value\n\n        },\n        bodyComplete: {} // reset all fields completion on new prop event\n\n      }));\n    });\n\n    _defineProperty(this, \"onRemoveNewDocProp\", fieldToRemove => e => {\n      this.setState(previousState => {\n        // Destructuring assignement tricks\n        // https://stackoverflow.com/questions/33053310/remove-value-from-object-without-mutating-it\n        let {\n          [fieldToRemove]: omit,\n          ...bodyWithoutField\n        } = previousState.body;\n        return {\n          fieldsToUpdate: previousState.fieldsToUpdate.filter(f => f !== fieldToRemove),\n          body: bodyWithoutField\n        };\n      });\n    });\n\n    const docPropsObject = props.mapping[props.index][\"mappings\"][\"properties\"];\n    this.docPropsList = Object.keys(docPropsObject).map(name => {\n      let prop = docPropsObject[name];\n      return {\n        name,\n        ...prop\n      };\n    });\n    this.state = {\n      fieldsToUpdate: [],\n      newDocPropNameValue: \"\",\n      body: {},\n      bodyComplete: {}\n    };\n    this.options = this.docPropsList.map(docProp => ({\n      value: docProp.name,\n      inputDisplay: docProp.name,\n      disabled: this.state.fieldsToUpdate.includes(docProp.name)\n    }));\n    this.onChangeNewDocProp = this.onChangeNewDocProp.bind(this);\n    this.onAddNewDocProp = this.onAddNewDocProp.bind(this);\n    this.onRemoveNewDocProp = this.onRemoveNewDocProp.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleInput(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    const {\n      index: i\n    } = this.props;\n    this.setState(previousState => ({\n      body: { ...previousState.body,\n        [name]: value\n      }\n    }));\n    let searchableFieldName; // to search top hits values in current field or it's multifield\n\n    this.docPropsList.forEach(f => {\n      if (f.name !== name) return;\n\n      if (f.type === \"keyword\") {\n        searchableFieldName = f.name;\n        return;\n      }\n\n      if (f.fields) {\n        let multiFields = Object.keys(f.fields);\n        multiFields.forEach(sf => {\n          if (f.fields[sf].type === \"keyword\") searchableFieldName = f.name + \".\" + sf;\n        });\n      }\n    });\n\n    if (searchableFieldName) {\n      const complete = await axios.get(`../api/doc-editor/${i}/_hits/${searchableFieldName}?beginwith=${value}`);\n      this.setState(previousState => ({\n        bodyComplete: {\n          [name]: complete.data ? complete.data.map(c => c.key) : []\n        }\n      }));\n    }\n  }\n\n  handleSubmit(e) {\n    // save the same (partial) body for each docs, or by query\n    this.props.saveDocs(this.state.body).then(result => {\n      if (result) this.props.close();\n    }).catch(err => {\n      console.log(\"Unable to update the group of documents. Error :\", err);\n    });\n  }\n\n  getDocPropByName(name) {\n    return this.docPropsList.find(docProp => docProp.name === name);\n  } // loop on each props and display a form to manage it.\n  // if a doc to edit is passed, fill the form input with the doc field value\n\n\n  render() {\n    // ICI une select box pour choisir le champ à modifier\n    // en enlevant ceux deja choisit, et uniquement format compatible\n    const selectFieldToUpdate = /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(EuiText, null, \"Choose a field you want to update\"), /*#__PURE__*/React.createElement(EuiSuperSelect, {\n      options: this.options,\n      valueOfSelected: this.state.newDocPropNameValue,\n      onChange: this.onChangeNewDocProp\n    }), /*#__PURE__*/React.createElement(EuiButton, {\n      onClick: this.onAddNewDocProp,\n      style: {\n        marginLeft: \"10px\"\n      }\n    }, \"Add...\"));\n    const formProps = this.state.fieldsToUpdate.map(docPropName => {\n      const docProp = this.getDocPropByName(docPropName);\n      const propName = docProp[\"name\"];\n      let propType = docProp[\"type\"];\n      let value = this.state.body[propName];\n      let propField = null;\n      let propComplete = null;\n\n      if (propType != 'undefined') {\n        if ([\"long\", \"integer\", \"short\", \"byte\", \"double\", \"float\", \"half_float\", \"scaled_float\"].includes(propType)) {\n          propField = /*#__PURE__*/React.createElement(EuiFieldNumber, {\n            name: propName,\n            value: value ? Number(value) : '',\n            onChange: this.handleInput\n          });\n        } else if ([\"object\", \"geo_point\"].includes(propType) || typeof value === 'array' || typeof value === 'object') {\n          propField = /*#__PURE__*/React.createElement(EuiCodeEditor, {\n            mode: \"json\",\n            theme: \"github\",\n            width: \"100%\",\n            height: \"200px\",\n            name: propName,\n            value: JSON.stringify(value, null, 4),\n            onChange: e => {\n              this.handleInput({\n                target: {\n                  name: propName,\n                  value: JSON.parse(e)\n                }\n              });\n            },\n            setOptions: {\n              fontSize: '12px',\n              enableBasicAutocompletion: false,\n              enableSnippets: true,\n              enableLiveAutocompletion: false\n            },\n            \"aria-label\": \"Edit json for \" + propName\n          });\n        } else if (propType === \"boolean\") {\n          propField = /*#__PURE__*/React.createElement(EuiCheckbox, {\n            checked: value,\n            onChange: this.handleInput\n          });\n        } else {\n          propField = /*#__PURE__*/React.createElement(EuiFieldText, {\n            name: propName,\n            value: value,\n            autoComplete: \"off\",\n            onChange: this.handleInput\n          }); // add the auto-complete suggest list if existing for the field\n\n          if (this.state.bodyComplete[propName] && this.state.bodyComplete[propName].length) {\n            propComplete = /*#__PURE__*/React.createElement(EuiListGroup, {\n              flush: true,\n              bordered: true\n            }, this.state.bodyComplete[propName].map(complete => /*#__PURE__*/React.createElement(EuiListGroupItem, {\n              key: complete,\n              label: complete,\n              onClick: e => {\n                this.setState(previousState => ({\n                  body: { ...previousState.body,\n                    [propName]: complete\n                  },\n                  bodyComplete: {}\n                }));\n              }\n            })));\n          }\n        }\n      }\n\n      const propLabel = /*#__PURE__*/React.createElement(\"span\", null, propName, /*#__PURE__*/React.createElement(EuiButtonIcon, {\n        iconSize: \"s\",\n        iconType: \"cross\",\n        color: \"danger\",\n        onClick: this.onRemoveNewDocProp(propName),\n        \"aria-label\": \"Remove the field from the form\",\n        title: \"Remove the field from the form\"\n      }));\n      return /*#__PURE__*/React.createElement(EuiFormRow, {\n        key: propName,\n        label: propLabel,\n        helpText: propType\n      }, /*#__PURE__*/React.createElement(Fragment, null, propField, propComplete));\n    });\n    let formPropsPanel;\n\n    if (this.state.fieldsToUpdate.length) {\n      formPropsPanel = /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(EuiText, {\n        grow: false\n      }, /*#__PURE__*/React.createElement(\"h5\", null, \"Fill the document form\"), \"Only chosen field will be updated.\"), /*#__PURE__*/React.createElement(EuiSpacer, {\n        size: \"s\"\n      }), /*#__PURE__*/React.createElement(EuiPanel, {\n        paddingSize: \"m\",\n        hasShadow: true,\n        style: {\n          maxWidth: 500\n        }\n      }, /*#__PURE__*/React.createElement(EuiForm, null, formProps)), /*#__PURE__*/React.createElement(EuiSpacer, {\n        size: \"m\"\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(EuiFlyout, {\n      ownFocus: true,\n      onClose: this.props.close,\n      size: \"m\"\n    }, /*#__PURE__*/React.createElement(EuiFlyoutHeader, {\n      hasBorder: true\n    }, /*#__PURE__*/React.createElement(EuiTitle, {\n      size: \"m\"\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"AddNewDocumentToIndex\"\n    }, \"Update all selected doc\"))), /*#__PURE__*/React.createElement(EuiFlyoutBody, null, formPropsPanel, selectFieldToUpdate), /*#__PURE__*/React.createElement(EuiFlyoutFooter, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      justifyContent: \"spaceBetween\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButtonEmpty, {\n      iconType: \"cross\",\n      onClick: this.props.close,\n      flush: \"left\"\n    }, \"Close\")), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      onClick: this.handleSubmit,\n      fill: true\n    }, \"Save\")))));\n  }\n\n}","import React, { Component } from 'react';\nimport 'brace/theme/github';\nimport 'brace/mode/json';\nimport 'brace/snippets/json';\nimport { EuiButton, EuiButtonEmpty, EuiCodeEditor, EuiFieldText, EuiFieldNumber, EuiFlexItem, EuiFlexGroup, EuiFlyout, EuiFlyoutBody, EuiFlyoutFooter, EuiFlyoutHeader, EuiForm, EuiFormRow, EuiPanel, EuiSwitch, EuiText, EuiTitle } from '@elastic/eui';\nexport default class extends Component {\n  constructor(props) {\n    super(props); // List of fields of the doc from mapping\n\n    const docPropsObject = props.mapping[props.index][\"mappings\"][\"properties\"];\n    this.docPropsList = Object.keys(docPropsObject).map(name => {\n      let prop = docPropsObject[name];\n      return {\n        name,\n        ...prop\n      };\n    }); // Data for a doc when update case\n\n    this.state = {\n      body: props.docToEdit || {}\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInput(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    this.setState(previousState => ({\n      body: { ...previousState.body,\n        [name]: value // with boolean, get checked params. else get value\n\n      }\n    }));\n  }\n\n  handleSubmit(e) {\n    this.props.saveDoc(this.state.body).then(result => {\n      if (result) this.props.close();\n    }).catch(err => {\n      console.log(\"Unable to add the document. Error :\", err);\n    });\n  } // loop on each props and display a form to manage it.\n  // if a doc to edit is passed, fill the form input with the doc field value\n\n\n  render() {\n    const formProps = this.docPropsList.map(docProp => {\n      const propName = docProp[\"name\"];\n      let propType = docProp[\"type\"];\n      console.log(propName, ' -> ', propType);\n      let value = this.state.body[propName];\n      let propField;\n\n      if (propType != 'undefined') {\n        if ([\"long\", \"integer\", \"short\", \"byte\", \"double\", \"float\", \"half_float\", \"scaled_float\"].includes(propType)) {\n          propField = /*#__PURE__*/React.createElement(EuiFieldNumber, {\n            name: propName,\n            value: value ? Number(value) : '',\n            onChange: this.handleInput\n          });\n        } else if (propType === \"boolean\") {\n          propField = /*#__PURE__*/React.createElement(EuiSwitch, {\n            checked: value,\n            onChange: e => {\n              this.handleInput({\n                target: {\n                  name: propName,\n                  value: e.target.checked\n                }\n              });\n            }\n          });\n        } else if ([\"object\", \"geo_point\"].includes(propType) || typeof value === 'array' || typeof value === 'object') {\n          propField = /*#__PURE__*/React.createElement(EuiCodeEditor, {\n            mode: \"json\",\n            theme: \"github\",\n            width: \"100%\",\n            height: \"200px\",\n            name: propName,\n            value: JSON.stringify(value, null, 4),\n            onChange: e => {\n              this.handleInput({\n                target: {\n                  name: propName,\n                  value: JSON.parse(e)\n                }\n              });\n            },\n            setOptions: {\n              fontSize: '12px',\n              enableBasicAutocompletion: false,\n              enableSnippets: true,\n              enableLiveAutocompletion: false\n            },\n            \"aria-label\": \"Edit json for \" + propName\n          });\n        } else {\n          propField = /*#__PURE__*/React.createElement(EuiFieldText, {\n            name: propName,\n            value: value,\n            onChange: this.handleInput\n          });\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(EuiFormRow, {\n        key: propName,\n        label: propName,\n        helpText: propType\n      }, propField);\n    });\n    return /*#__PURE__*/React.createElement(EuiFlyout, {\n      ownFocus: true,\n      onClose: this.props.close,\n      size: \"m\"\n    }, /*#__PURE__*/React.createElement(EuiFlyoutHeader, {\n      hasBorder: true\n    }, /*#__PURE__*/React.createElement(EuiTitle, {\n      size: \"m\"\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"AddNewDocumentToIndex\"\n    }, \"Add a new document\"))), /*#__PURE__*/React.createElement(EuiFlyoutBody, null, /*#__PURE__*/React.createElement(EuiText, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(\"h5\", null, \"Fill the document form\")), /*#__PURE__*/React.createElement(EuiPanel, {\n      paddingSize: \"m\",\n      hasShadow: true,\n      style: {\n        maxWidth: 500\n      }\n    }, /*#__PURE__*/React.createElement(EuiForm, null, formProps))), /*#__PURE__*/React.createElement(EuiFlyoutFooter, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      justifyContent: \"spaceBetween\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButtonEmpty, {\n      iconType: \"cross\",\n      onClick: this.props.close,\n      flush: \"left\"\n    }, \"Close\")), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      onClick: this.handleSubmit,\n      fill: true\n    }, \"Save\")))));\n  }\n\n}","import React, { Component, Fragment } from 'react';\nimport { EuiPortal } from '@elastic/eui';\nimport GroupUpdateDocsFlyout from '../flyout/GroupUpdateDocsFlyout';\nexport default class GroupUpdateDocsWrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n    this.open = this.open.bind(this);\n    this.close = this.close.bind(this);\n  }\n\n  open(e) {\n    this.setState({\n      isVisible: true\n    });\n  }\n\n  close(e) {\n    this.setState({\n      isVisible: false\n    });\n  }\n\n  render() {\n    let portal = null;\n\n    if (this.state.isVisible) {\n      portal = /*#__PURE__*/React.createElement(EuiPortal, null, /*#__PURE__*/React.createElement(GroupUpdateDocsFlyout, {\n        close: this.close,\n        index: this.props.index,\n        mapping: this.props.mapping,\n        saveDocs: this.props.submitCallback\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, null, portal, /*#__PURE__*/React.cloneElement(this.props.children, {\n      onClick: this.open\n    }));\n  }\n\n}","import React, { Component, Fragment } from 'react';\nimport { EuiPortal } from '@elastic/eui';\nimport ManageDocFlyout from '../flyout/ManageDocFlyout';\nexport default class ManageDocWrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n    this.open = this.open.bind(this);\n    this.close = this.close.bind(this);\n  }\n\n  open(e) {\n    this.setState({\n      isVisible: true\n    });\n  }\n\n  close(e) {\n    this.setState({\n      isVisible: false\n    });\n  }\n\n  render() {\n    let portal = null;\n\n    if (this.state.isVisible) {\n      portal = /*#__PURE__*/React.createElement(EuiPortal, null, /*#__PURE__*/React.createElement(ManageDocFlyout, {\n        close: this.close,\n        index: this.props.index,\n        mapping: this.props.mapping,\n        docToEdit: this.props.data,\n        saveDoc: this.props.submitCallback\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, null, portal, /*#__PURE__*/React.cloneElement(this.props.children, {\n      onClick: this.open\n    }));\n  }\n\n}","export function getSelectedItems(items) {\n  return items.filter(item => isItemSelected(item));\n}\nexport function isItemSelected(item) {\n  return item.selected || false;\n}\nexport function areAllCurrentPageItemsSelected(items) {\n  if (!items.length) {\n    return false;\n  }\n\n  const unselectedItem = items.find(item => !isItemSelected(item)); // return true if all items of the page are selected\n\n  return unselectedItem === undefined;\n}\nexport function areAtLeastOneCurrentPageItemsSelected(items) {\n  const selectedItem = items.find(item => isItemSelected(item)); // return true if all items of the page are selected\n\n  return selectedItem !== undefined;\n}","export function getQueryDslBySearchText(query) {\n  return query.trim() ? {\n    query_string: {\n      query\n    }\n  } : {\n    match_all: {}\n  };\n}","/**\n * Stringify method\n * Avoid infinite recursion in objects\n * @param {*} obj the object to stringify\n * @param {fn} replacer a possible dedicated repacer function\n * @param {int} indent Nb of spaces for code indentation\n */\nexport function stringifyOnce(obj, replacer, indent) {\n  var printedObjects = [];\n  var printedObjectKeys = [];\n\n  function printOnceReplacer(key, value) {\n    if (printedObjects.length > 2000) {\n      // browsers will not print more than 20K, I don't see the point to allow 2K.. algorithm will not be fast anyway if we have too many objects\n      return 'object too long';\n    }\n\n    var printedObjIndex = false;\n    printedObjects.forEach(function (obj, index) {\n      if (obj === value) {\n        printedObjIndex = index;\n      }\n    });\n\n    if (key == '') {\n      //root element\n      printedObjects.push(obj);\n      printedObjectKeys.push(\"root\");\n      return value;\n    } else if (printedObjIndex + \"\" != \"false\" && typeof value == \"object\") {\n      if (printedObjectKeys[printedObjIndex] == \"root\") {\n        return \"(pointer to root)\";\n      } else {\n        return \"(see \" + (!!value && !!value.constructor ? value.constructor.name.toLowerCase() : typeof value) + \" with key \" + printedObjectKeys[printedObjIndex] + \")\";\n      }\n    } else {\n      var qualifiedKey = key || \"(empty key)\";\n      printedObjects.push(value);\n      printedObjectKeys.push(qualifiedKey);\n\n      if (replacer) {\n        return replacer(key, value);\n      } else {\n        return value;\n      }\n    }\n  }\n\n  return JSON.stringify(obj, printOnceReplacer, indent);\n}\n;"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnvlpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzpjpJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}